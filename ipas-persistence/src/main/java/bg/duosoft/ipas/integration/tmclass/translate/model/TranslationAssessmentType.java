//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2022.03.04 at 11:05:36 AM EET 
//


package bg.duosoft.ipas.integration.tmclass.translate.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TranslationAssessmentType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TranslationAssessmentType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="Source and target found"/>
 *     &lt;enumeration value="Source and target found, in the same class and in different class"/>
 *     &lt;enumeration value="Source and target found, using different class"/>
 *     &lt;enumeration value="Source and target found on sublevel, in the same class and in different class"/>
 *     &lt;enumeration value="Source and target found on sublevel"/>
 *     &lt;enumeration value="Source and target found on sublevel, using different class"/>
 *     &lt;enumeration value="Source found, target not found"/>
 *     &lt;enumeration value="Source found, target not found, using different class"/>
 *     &lt;enumeration value="Source not found"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TranslationAssessmentType")
@XmlEnum
public enum TranslationAssessmentType {

    @XmlEnumValue("Source and target found")
    SOURCE_AND_TARGET_FOUND("Source and target found"),
    @XmlEnumValue("Source and target found, in the same class and in different class")
    SOURCE_AND_TARGET_FOUND_IN_THE_SAME_CLASS_AND_IN_DIFFERENT_CLASS("Source and target found, in the same class and in different class"),
    @XmlEnumValue("Source and target found, using different class")
    SOURCE_AND_TARGET_FOUND_USING_DIFFERENT_CLASS("Source and target found, using different class"),
    @XmlEnumValue("Source and target found on sublevel, in the same class and in different class")
    SOURCE_AND_TARGET_FOUND_ON_SUBLEVEL_IN_THE_SAME_CLASS_AND_IN_DIFFERENT_CLASS("Source and target found on sublevel, in the same class and in different class"),
    @XmlEnumValue("Source and target found on sublevel")
    SOURCE_AND_TARGET_FOUND_ON_SUBLEVEL("Source and target found on sublevel"),
    @XmlEnumValue("Source and target found on sublevel, using different class")
    SOURCE_AND_TARGET_FOUND_ON_SUBLEVEL_USING_DIFFERENT_CLASS("Source and target found on sublevel, using different class"),
    @XmlEnumValue("Source found, target not found")
    SOURCE_FOUND_TARGET_NOT_FOUND("Source found, target not found"),
    @XmlEnumValue("Source found, target not found, using different class")
    SOURCE_FOUND_TARGET_NOT_FOUND_USING_DIFFERENT_CLASS("Source found, target not found, using different class"),
    @XmlEnumValue("Source not found")
    SOURCE_NOT_FOUND("Source not found");
    private final String value;

    TranslationAssessmentType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TranslationAssessmentType fromValue(String v) {
        for (TranslationAssessmentType c: TranslationAssessmentType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
