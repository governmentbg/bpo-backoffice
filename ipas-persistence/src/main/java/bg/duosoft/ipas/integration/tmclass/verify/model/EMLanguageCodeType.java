//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.02.14 at 01:17:22 PM EET 
//


package bg.duosoft.ipas.integration.tmclass.verify.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for EM_LanguageCodeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="EM_LanguageCodeType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *     &lt;enumeration value="bg"/&gt;
 *     &lt;enumeration value="cs"/&gt;
 *     &lt;enumeration value="da"/&gt;
 *     &lt;enumeration value="de"/&gt;
 *     &lt;enumeration value="el"/&gt;
 *     &lt;enumeration value="en"/&gt;
 *     &lt;enumeration value="es"/&gt;
 *     &lt;enumeration value="et"/&gt;
 *     &lt;enumeration value="fi"/&gt;
 *     &lt;enumeration value="fr"/&gt;
 *     &lt;enumeration value="it"/&gt;
 *     &lt;enumeration value="lt"/&gt;
 *     &lt;enumeration value="lv"/&gt;
 *     &lt;enumeration value="hr"/&gt;
 *     &lt;enumeration value="hu"/&gt;
 *     &lt;enumeration value="mt"/&gt;
 *     &lt;enumeration value="nl"/&gt;
 *     &lt;enumeration value="pl"/&gt;
 *     &lt;enumeration value="pt"/&gt;
 *     &lt;enumeration value="ro"/&gt;
 *     &lt;enumeration value="sk"/&gt;
 *     &lt;enumeration value="sl"/&gt;
 *     &lt;enumeration value="sv"/&gt;
 *     &lt;enumeration value="ar"/&gt;
 *     &lt;enumeration value="bs"/&gt;
 *     &lt;enumeration value="ga"/&gt;
 *     &lt;enumeration value="he"/&gt;
 *     &lt;enumeration value="is"/&gt;
 *     &lt;enumeration value="ja"/&gt;
 *     &lt;enumeration value="ka"/&gt;
 *     &lt;enumeration value="ko"/&gt;
 *     &lt;enumeration value="me"/&gt;
 *     &lt;enumeration value="mk"/&gt;
 *     &lt;enumeration value="no"/&gt;
 *     &lt;enumeration value="ru"/&gt;
 *     &lt;enumeration value="sq"/&gt;
 *     &lt;enumeration value="sr"/&gt;
 *     &lt;enumeration value="tr"/&gt;
 *     &lt;enumeration value="zh"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "EM_LanguageCodeType")
@XmlEnum
public enum EMLanguageCodeType {

    @XmlEnumValue("bg")
    BG("bg"),
    @XmlEnumValue("cs")
    CS("cs"),
    @XmlEnumValue("da")
    DA("da"),
    @XmlEnumValue("de")
    DE("de"),
    @XmlEnumValue("el")
    EL("el"),
    @XmlEnumValue("en")
    EN("en"),
    @XmlEnumValue("es")
    ES("es"),
    @XmlEnumValue("et")
    ET("et"),
    @XmlEnumValue("fi")
    FI("fi"),
    @XmlEnumValue("fr")
    FR("fr"),
    @XmlEnumValue("it")
    IT("it"),
    @XmlEnumValue("lt")
    LT("lt"),
    @XmlEnumValue("lv")
    LV("lv"),
    @XmlEnumValue("hr")
    HR("hr"),
    @XmlEnumValue("hu")
    HU("hu"),
    @XmlEnumValue("mt")
    MT("mt"),
    @XmlEnumValue("nl")
    NL("nl"),
    @XmlEnumValue("pl")
    PL("pl"),
    @XmlEnumValue("pt")
    PT("pt"),
    @XmlEnumValue("ro")
    RO("ro"),
    @XmlEnumValue("sk")
    SK("sk"),
    @XmlEnumValue("sl")
    SL("sl"),
    @XmlEnumValue("sv")
    SV("sv"),
    @XmlEnumValue("ar")
    AR("ar"),
    @XmlEnumValue("bs")
    BS("bs"),
    @XmlEnumValue("ga")
    GA("ga"),
    @XmlEnumValue("he")
    HE("he"),
    @XmlEnumValue("is")
    IS("is"),
    @XmlEnumValue("ja")
    JA("ja"),
    @XmlEnumValue("ka")
    KA("ka"),
    @XmlEnumValue("ko")
    KO("ko"),
    @XmlEnumValue("me")
    ME("me"),
    @XmlEnumValue("mk")
    MK("mk"),
    @XmlEnumValue("no")
    NO("no"),
    @XmlEnumValue("ru")
    RU("ru"),
    @XmlEnumValue("sq")
    SQ("sq"),
    @XmlEnumValue("sr")
    SR("sr"),
    @XmlEnumValue("tr")
    TR("tr"),
    @XmlEnumValue("zh")
    ZH("zh");
    private final String value;

    EMLanguageCodeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static EMLanguageCodeType fromValue(String v) {
        for (EMLanguageCodeType c: EMLanguageCodeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
